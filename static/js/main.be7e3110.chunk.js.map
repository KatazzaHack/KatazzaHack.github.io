{"version":3,"sources":["Buttons.js","Game.js","Content.js","serviceWorker.js","index.js"],"names":["Buttons","this","renderButton","i","onClick","handleClick","console","log","React","Component","Button","type","class","props","Game","game_is_active","is_start","startGame","container","document","getElementById","dispatchEvent","Event","Content","is_visible","onEnd","OnGameEnd","domContainer","querySelector","ReactDOM","render","createElement","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sUAGMA,G,mLAEJ,OAAQ,6BACNC,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,M,mCAIRC,GAAI,IAAD,OACf,OAAO,kBAAC,EAAD,CAAQC,QAAS,kBAAM,EAAKC,YAAYF,Q,kCAGpCA,GACXG,QAAQC,IAAI,UAAYJ,EAAI,oB,GAdRK,IAAMC,YAkBtBC,E,uKACK,IAAD,OACR,OACC,4BACCC,KAAK,SAASC,MAAM,cACpBR,QAAS,kBAAM,EAAKS,MAAMT,YAF3B,c,GAHkBI,IAAMC,WAaZT,ICEAc,G,wDAhCd,WAAYD,GAAQ,IAAD,8BAClB,cAAMA,IACDE,gBAAkB,EAAKF,MAAMG,SAClCV,QAAQC,IAAI,gBAAkB,EAAKQ,gBAHjB,E,qDAMR,IAAD,OAQR,OACC,6BACC,4BAAQX,QAAS,kBAAM,EAAKa,cAA5B,iB,kCASHX,QAAQC,IAAI,cACZN,KAAKc,gBAAiB,EACtBd,KAAKiB,UAAYC,SAASC,eAAe,kBACzCnB,KAAKiB,UAAUG,cAAc,IAAIC,MAAM,kB,GA7BtBd,IAAMC,YCGnBc,E,kDACL,WAAYV,GAAQ,IAAD,8BAClB,cAAMA,IACDG,UAAW,EAFE,E,qDAKT,IAAD,OACR,OACC,6BACC,6BACK,6BACE,6BACE,uCAEF,kBAAC,EAAD,CAASQ,WAAYvB,KAAKe,aAG9B,kBAAC,EAAD,CAAMA,SAAUf,KAAKe,SAAUS,MAAO,kBAAM,EAAKC,kB,kCAMtDzB,KAAKe,UAAW,M,GAvBIR,IAAMC,WA2BtBkB,EAAeR,SAASS,cAAc,YAC5CC,IAASC,OAAOtB,IAAMuB,cAAcR,GAAUI,GAE/BJ,QCxBKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNP,IAASC,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,YDsHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.be7e3110.chunk.js","sourcesContent":["import React from 'react';\nimport './Buttons.css';\n\nclass Buttons extends React.Component {\n\trender() {\n\t\treturn (<div>\n\t\t\t{this.renderButton(0)} \n\t\t\t{this.renderButton(1)}\n\t\t\t{this.renderButton(2)}\n\t\t</div>);\n\t}\n\n\trenderButton(i) {\n\t\treturn <Button onClick={() => this.handleClick(i)}/>;\n\t}\n\n\thandleClick(i) {\n\t\tconsole.log('button ' + i + ' was pressed');\n\t}\n}\n\nclass Button extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<button \n\t\t\t\ttype=\"button\" class=\"btn-default\" \n\t\t\t\tonClick={() => this.props.onClick()}\n\t\t\t>\n\t\t\t\tButton\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default Buttons;\n","import React from 'react';\nimport './Game.css';\n\nclass Game extends React.Component {\n\tconstructor(props)\t{\n\t\tsuper(props);\n\t\tthis.game_is_active = !this.props.is_start;\n\t\tconsole.log('game active: ' + this.game_is_active);\n\t}\n\n  render() {\n\t\t// if (this.game_is_active) {\n\t\t// return (\n    //\t\t<div id=\"game-container\">\n\t\t//\t\tGame should be located here\n   \t// \t\t</div>\n  \t//\t);\n\t\t// } else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={() => this.startGame()}>\n\t\t\t\t\t\tStart game\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t//}\n\t}\n\n\tstartGame() {\n\t\tconsole.log('start game');\n\t\tthis.game_is_active = true;\n\t\tthis.container = document.getElementById('game-container');\n\t\tthis.container.dispatchEvent(new Event('gameStart'));\n\t}\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Content.css';\nimport Buttons from './Buttons';\nimport Game from './Game';\n\nclass Content extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.is_start = true;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<nav>\n        \t<div>\n          \t<div>\n            \t<p> Stats </p>\n          \t</div>\n          \t<Buttons is_visible={this.is_start}></Buttons>\n        \t</div>\n      \t</nav>\n      \t<Game is_start={this.is_start} onEnd={() => this.OnGameEnd()}></Game>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tonGameEnd() {\n\t\tthis.is_start = true;\n\t}\n}\n\nconst domContainer = document.querySelector('#content');\nReactDOM.render(React.createElement(Content), domContainer);\n\nexport default Content;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Content from './Content';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Content />\n  </React.StrictMode>,\n  document.getElementById('content')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}