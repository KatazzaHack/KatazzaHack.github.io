{"version":3,"sources":["Game.js","ClickTypeButtons.js","GameWrapper.js","Header.js","serviceWorker.js","index.js"],"names":["Game","props","id","React","Component","ClickTypeButtons","this","renderButton","i","onClick","handleClick","console","log","ClickTypeButton","Button","type","GameWrapper","state","game_started","setState","game_content","onEnd","OnGameEnd","onGameStart","Nav","Item","domContainer","document","querySelector","ReactDOM","render","createElement","Header","open","aria-controls","aria-expanded","Collapse","in","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAaeA,G,wDATb,WAAYC,GAAS,uCACbA,G,qDAIN,OAAO,yBAAKC,GAAG,kBAAR,4B,GANQC,IAAMC,YCAnBC,E,uKAEF,OAAQ,6BACLC,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,M,mCAIVC,GAAI,IAAD,OACd,OAAO,kBAAC,EAAD,CAAiBC,QAAS,kBAAM,EAAKC,YAAYF,Q,kCAG9CA,GACVG,QAAQC,IAAI,UAAYJ,EAAI,oB,GAdDL,IAAMC,WAkB/BS,E,uKACM,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLN,QAAS,kBAAM,EAAKR,MAAMQ,YAF5B,8B,GAHwBN,IAAMC,WAarBC,IC3BTW,E,kDACJ,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXC,cAAc,GAHC,E,wDAQjBZ,KAAKa,SAAS,CAACD,cAAc,M,oCAI7BP,QAAQC,IAAI,gBACZN,KAAKa,SAAS,CAACD,cAAc,M,+BAGrB,IACJE,EADG,OASP,OAHEA,EAJGd,KAAKW,MAAMC,aAKZ,kBAAC,EAAD,CAAMG,MAAO,kBAAM,EAAKC,eAHxB,kBAACR,EAAA,EAAD,CAAQL,QAAS,kBAAM,EAAKc,gBAA5B,4FAMF,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,KACI,uCAEJ,kBAACD,EAAA,EAAIC,KAAL,KACE,gDAEF,kBAACD,EAAA,EAAIC,KAAL,KACE,kBAAC,EAAD,QATN,IAaGL,O,GAxCiBjB,IAAMC,WA8C1BsB,EAAeC,SAASC,cAAc,YAC5CC,IAASC,OAAO3B,IAAM4B,cAAcf,GAAcU,GAEnCV,Q,QCtBAgB,E,kDA5Bd,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,CACVgB,MAAM,GAHM,E,qDAQT,IAAD,OACR,OACC,gCACC,kBAACnB,EAAA,EAAD,CACOL,QAAS,kBAAM,EAAKU,SAAS,CAAEc,MAAO,EAAKhB,MAAMgB,QACjDC,gBAAc,wBACdC,gBAAe7B,KAAKW,MAAMgB,MAHjC,SAOK,kBAACG,EAAA,EAAD,CAAUC,GAAI/B,KAAKW,MAAMgB,MACvB,yBAAK/B,GAAG,yBAAR,6B,GArBUC,IAAMC,WCQPkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNb,IAASC,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,YDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.327f3ea0.chunk.js","sourcesContent":["import React from 'react';\nimport './Game.css';\n\nclass Game extends React.Component {\n  constructor(props)  {\n    super(props);\n  }\n\n  render() {\n    return <div id=\"game-container\"> Game should be here</div>;\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass ClickTypeButtons extends React.Component {\n  render() {\n    return (<div>\n      {this.renderButton(0)} \n      {this.renderButton(1)}\n      {this.renderButton(2)}\n    </div>);\n  }\n\n  renderButton(i) {\n    return <ClickTypeButton onClick={() => this.handleClick(i)}/>;\n  }\n\n  handleClick(i) {\n    console.log('button ' + i + ' was pressed');\n  }\n}\n\nclass ClickTypeButton extends React.Component {\n  render() {\n    return (\n      <Button \n        type=\"button\" \n        onClick={() => this.props.onClick()}\n      >\n        Button with click type\n      </Button>\n    );\n  }\n}\n\nexport default ClickTypeButtons;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport Game from './Game';\nimport ClickTypeButtons from './ClickTypeButtons';\n\nclass GameWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game_started: false,\n    };\n  }\n  \n  onGameEnd() {\n    this.setState({game_started: false});\n  }\n\n  onGameStart() {\n    console.log(\"game started\");\n    this.setState({game_started: true});\n  }\n\n  render() {\n    let game_content;\n    if (!this.state.game_started) {\n      game_content = \n        <Button onClick={() => this.onGameStart()}> Начни блять игру </Button>;\n    } else {\n      game_content = \n        <Game onEnd={() => this.OnGameEnd()}></Game>; \n    }\n    return (\n      <div>\n        <Nav>\n          <Nav.Item>\n              <p> Stats </p>\n          </Nav.Item>\n          <Nav.Item>\n            <p> Current budget </p>\n          </Nav.Item>\n          <Nav.Item>\n            <ClickTypeButtons/>\n          </Nav.Item>\n        </Nav>,\n\n        {game_content}\n      </div>\n    );\n  }\n}\n\nconst domContainer = document.querySelector('#content');\nReactDOM.render(React.createElement(GameWrapper), domContainer);\n\nexport default GameWrapper;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Collapse from 'react-bootstrap/Collapse';\n\nclass Header extends React.Component {\n\n\tconstructor(props) {\n    \tsuper(props);\n    \tthis.state = {\n      \t\topen: false\n    \t};\n    }\n\n\n\trender() {\n\t\treturn (\n\t\t\t<header>\n\t\t\t\t<Button\n        \t\t\tonClick={() => this.setState({ open: !this.state.open })}\n        \t\t\taria-controls=\"example-collapse-text\"\n        \t\t\taria-expanded={this.state.open}\n      \t\t\t>\n        \t\t\tRules\n      \t\t\t</Button>\n      \t\t\t<Collapse in={this.state.open}>\n        \t\t\t<div id=\"example-collapse-text\">\n          \t\t\t\tRules will be here.\n        \t\t\t</div>\n      \t\t\t</Collapse>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default Header;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GameWrapper from './GameWrapper';\nimport Header from './Header';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <GameWrapper />\n  </React.StrictMode>,\n  document.getElementById('content')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}